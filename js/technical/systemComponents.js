const systemComponents={"tab-buttons":{props:["layer","data","name"],template:'\n\t\t\t<div class="upgRow">\n\t\t\t\t<div v-for="tab in Object.keys(data)">\n\t\t\t\t\t<button v-if="data[tab].unlocked == undefined || data[tab].unlocked" v-bind:class="{tabButton: true, notify: subtabShouldNotify(layer, name, tab), resetNotify: subtabResetNotify(layer, name, tab)}"\n\t\t\t\t\tv-bind:style="[{\'border-color\': tmp[layer].color}, (subtabShouldNotify(layer, name, tab) ? {\'box-shadow\': \'var(--hqProperty2a), 0 0 10px \'  + (data[tab].glowColor || defaultGlow)} : {}), tmp[layer].componentStyles[\'tab-button\'], data[tab].buttonStyle]"\n\t\t\t\t\t\tv-on:click="function(){player.subtabs[layer][name] = tab; updateTabFormats(); needCanvasUpdate = true;}">{{tab}}</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'},"tree-node":{props:["layer","abb","size","prev"],template:"\n\t\t<button v-if=\"nodeShown(layer)\"\n\t\t\tv-bind:id=\"layer\"\n\t\t\tv-on:click=\"function() {\n\t\t\t\tif (shiftDown && options.forceTooltips) player[layer].forceTooltip = !player[layer].forceTooltip\n\t\t\t\telse if(tmp[layer].isLayer) {\n\t\t\t\t\tif (tmp[layer].leftTab) {\n\t\t\t\t\t\tshowNavTab(layer, prev)\n\t\t\t\t\t\tshowTab('none')\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tshowTab(layer, prev)\n\t\t\t\t}\n\t\t\t\telse {run(layers[layer].onClick, layers[layer])}\n\t\t\t}\"\n\n\n\t\t\tv-bind:class=\"{\n\t\t\t\ttreeNode: tmp[layer].isLayer,\n\t\t\t\ttreeButton: !tmp[layer].isLayer,\n\t\t\t\tsmallNode: size == 'small',\n\t\t\t\t[layer]: true,\n\t\t\t\ttooltipBox: true,\n\t\t\t\tforceTooltip: player[layer].forceTooltip,\n\t\t\t\tghost: tmp[layer].layerShown == 'ghost',\n\t\t\t\thidden: !tmp[layer].layerShown,\n\t\t\t\tlocked: tmp[layer].isLayer ? !(player[layer].unlocked || tmp[layer].canReset) : !(tmp[layer].canClick),\n\t\t\t\tnotify: tmp[layer].notify && player[layer].unlocked,\n\t\t\t\tresetNotify: tmp[layer].prestigeNotify,\n\t\t\t\tcan: ((player[layer].unlocked || tmp[layer].canReset) && tmp[layer].isLayer) || (!tmp[layer].isLayer && tmp[layer].canClick),\n\t\t\t\tfront: !tmp.scrolled,\n\t\t\t}\"\n\t\t\tv-bind:style=\"constructNodeStyle(layer)\">\n\t\t\t<span class=\"nodeLabel\" v-html=\"(abb !== '' && tmp[layer].image === undefined) ? abb : '&nbsp;'\"></span>\n\t\t\t<tooltip\n      v-if=\"tmp[layer].tooltip != ''\"\n\t\t\t:text=\"(tmp[layer].isLayer) ? (\n\t\t\t\tplayer[layer].unlocked ? (tmp[layer].tooltip ? tmp[layer].tooltip : formatWhole(player[layer].points) + ' ' + tmp[layer].resource)\n\t\t\t\t: (tmp[layer].tooltipLocked ? tmp[layer].tooltipLocked : 'Reach ' + formatWhole(tmp[layer].requires) + ' ' + tmp[layer].baseResource + ' to unlock (You have ' + formatWhole(tmp[layer].baseAmount) + ' ' + tmp[layer].baseResource + ')')\n\t\t\t)\n\t\t\t: (\n\t\t\t\ttmp[layer].canClick ? (tmp[layer].tooltip ? tmp[layer].tooltip : 'I am a button!')\n\t\t\t\t: (tmp[layer].tooltipLocked ? tmp[layer].tooltipLocked : 'I am a button!')\n\t\t\t)\"></tooltip>\n\t\t\t<node-mark :layer='layer' :data='tmp[layer].marked'></node-mark></span>\n\t\t</button>\n\t\t"},"layer-tab":{props:["layer","back","spacing","embedded"],template:'<div v-bind:style="[tmp[layer].style ? tmp[layer].style : {}, (tmp[layer].tabFormat && !Array.isArray(tmp[layer].tabFormat)) ? tmp[layer].tabFormat[player.subtabs[layer].mainTabs].style : {}]" class="noBackground">\n\t\t<div v-if="back"><button v-bind:class="back == \'big\' ? \'other-back\' : \'back\'" v-on:click="goBack(layer)">‚Üê</button></div>\n\t\t<div v-if="!tmp[layer].tabFormat">\n\t\t\t<div v-if="spacing" v-bind:style="{\'height\': spacing}" :key="this.$vnode.key + \'-spacing\'"></div>\n\t\t\t<infobox v-if="tmp[layer].infoboxes" :layer="layer" :data="Object.keys(tmp[layer].infoboxes)[0]":key="this.$vnode.key + \'-info\'"></infobox>\n\t\t\t<main-display v-bind:style="tmp[layer].componentStyles[\'main-display\']" :layer="layer"></main-display>\n\t\t\t<div v-if="tmp[layer].type !== \'none\'">\n\t\t\t\t<prestige-button v-bind:style="tmp[layer].componentStyles[\'prestige-button\']" :layer="layer"></prestige-button>\n\t\t\t</div>\n\t\t\t<resource-display v-bind:style="tmp[layer].componentStyles[\'resource-display\']" :layer="layer"></resource-display>\n\t\t\t<milestones v-bind:style="tmp[layer].componentStyles.milestones" :layer="layer"></milestones>\n\t\t\t<div v-if="Array.isArray(tmp[layer].midsection)">\n\t\t\t\t<column :layer="layer" :data="tmp[layer].midsection" :key="this.$vnode.key + \'-mid\'"></column>\n\t\t\t</div>\n\t\t\t<clickables v-bind:style="tmp[layer].componentStyles[\'clickables\']" :layer="layer"></clickables>\n\t\t\t<buyables v-bind:style="tmp[layer].componentStyles.buyables" :layer="layer"></buyables>\n\t\t\t<upgrades v-bind:style="tmp[layer].componentStyles[\'upgrades\']" :layer="layer"></upgrades>\n\t\t\t<challenges v-bind:style="tmp[layer].componentStyles[\'challenges\']" :layer="layer"></challenges>\n\t\t\t<achievements v-bind:style="tmp[layer].componentStyles.achievements" :layer="layer"></achievements>\n\t\t\t<br><br>\n\t\t</div>\n\t\t<div v-if="tmp[layer].tabFormat">\n\t\t\t<div v-if="Array.isArray(tmp[layer].tabFormat)"><div v-if="spacing" v-bind:style="{\'height\': spacing}"></div>\n\t\t\t\t<column :layer="layer" :data="tmp[layer].tabFormat" :key="this.$vnode.key + \'-col\'"></column>\n\t\t\t</div>\n\t\t\t<div v-else>\n\t\t\t\t<div class="upgTable" v-bind:style="{\'padding-top\': (embedded ? \'0\' : \'25px\'), \'margin-top\': (embedded ? \'-10px\' : \'0\'), \'margin-bottom\': \'24px\'}">\n\t\t\t\t\t<tab-buttons v-bind:style="tmp[layer].componentStyles[\'tab-buttons\']" :layer="layer" :data="tmp[layer].tabFormat" :name="\'mainTabs\'"></tab-buttons>\n\t\t\t\t</div>\n\t\t\t\t<layer-tab v-if="tmp[layer].tabFormat[player.subtabs[layer].mainTabs].embedLayer" :layer="tmp[layer].tabFormat[player.subtabs[layer].mainTabs].embedLayer" :embedded="true" :key="this.$vnode.key + \'-\' + layer"></layer-tab>\n\t\t\t\t<column v-else :layer="layer" :data="tmp[layer].tabFormat[player.subtabs[layer].mainTabs].content" :key="this.$vnode.key + \'-col\'"></column>\n\t\t\t</div>\n\t\t</div></div>\n\t\t\t'},"overlay-head":{template:'\t\t\t\n\t\t<div class="overlayThing" style="padding-bottom:7px; width: 90%; z-index: 1000; position: relative">\n\t\t<span v-if="player.devSpeed && player.devSpeed != 1" class="overlayThing">\n\t\t\t<br>Dev Speed: {{format(player.devSpeed)}}x<br>\n\t\t</span>\n\t\t<span v-if="player.offTime !== undefined"  class="overlayThing">\n\t\t\t<br>Offline Time: {{formatTime(player.offTime.remain)}}<br>\n\t\t</span>\n\t\t<br>\n\t\t<span v-if="player.points.lt(\'1e1000\')"  class="overlayThing">You have </span>\n\t\t<h2  class="overlayThing" id="points">{{format(player.points)}}</h2>\n\t\t<span v-if="player.points.lt(\'1e1e6\')"  class="overlayThing"> {{modInfo.pointsName}}</span>\n\t\t<br>\n\t\t<span v-if="canGenPoints()"  class="overlayThing">({{tmp.other.oompsMag != 0 ? format(tmp.other.oomps) + " OOM" + (tmp.other.oompsMag < 0 ? "^OOM" : tmp.other.oompsMag > 1 ? "^" + tmp.other.oompsMag : "") + "s" : formatSmall(getPointGen())}}/sec)</span>\n\t\t<div v-for="thing in tmp.displayThings" class="overlayThing"><span v-if="thing" v-html="thing"></span></div>\n\t</div>\n\t'},"info-tab":{template:'\n        <div>\n        <h2>{{modInfo.name}}</h2>\n        <br>\n        <h3>{{VERSION.withName}}</h3>\n        <span v-if="modInfo.author">\n            <br>\n            Made by {{modInfo.author}}\t\n        </span>\n        <br>\n        The Modding Tree <a v-bind:href="\'https://github.com/Acamaeda/The-Modding-Tree/blob/master/changelog.md\'" target="_blank" class="link" v-bind:style = "{\'font-size\': \'14px\', \'display\': \'inline\'}" >{{TMT_VERSION.tmtNum}}</a> by Acamaeda\n        <br>\n        The Prestige Tree made by Jacorb and Aarex\n\t\t<br><br>\n\t\t<div class="link" onclick="showTab(\'changelog-tab\')">Changelog</div><br>\n        <span v-if="modInfo.discordLink"><a class="link" v-bind:href="modInfo.discordLink" target="_blank">{{modInfo.discordName}}</a><br></span>\n        <a class="link" href="https://discord.gg/F3xveHV" target="_blank" v-bind:style="modInfo.discordLink ? {\'font-size\': \'16px\'} : {}">The Modding Tree Discord</a><br>\n        <a class="link" href="http://discord.gg/wwQfgPa" target="_blank" v-bind:style="{\'font-size\': \'16px\'}">Main Prestige Tree server</a><br>\n\t\t<br><br>\n        Time Played: {{ formatTime(player.timePlayed) }}<br><br>\n        <h3>Hotkeys</h3><br>\n        <span v-for="key in hotkeys" v-if="player[key.layer].unlocked && tmp[key.layer].hotkeys[key.id].unlocked"><br>{{key.description}}</span></div>\n    '},"options-tab":{template:'\n        <table>\n            <tr>\n                <td><button class="opt" onclick="save()">Save</button></td>\n                <td><button class="opt" onclick="toggleOpt(\'autosave\')">Autosave: {{ options.autosave?"ON":"OFF" }}</button></td>\n                <td><button class="opt" onclick="hardReset()">HARD RESET</button></td>\n            </tr>\n            <tr>\n                <td><button class="opt" onclick="exportSave()">Export to clipboard</button></td>\n                <td><button class="opt" onclick="importSave()">Import</button></td>\n                <td><button class="opt" onclick="toggleOpt(\'offlineProd\')">Offline Prod: {{ options.offlineProd?"ON":"OFF" }}</button></td>\n            </tr>\n            <tr>\n                <td><button class="opt" onclick="switchTheme()">Theme: {{ getThemeName() }}</button></td>\n                <td><button class="opt" onclick="adjustMSDisp()">Show Milestones: {{ MS_DISPLAYS[MS_SETTINGS.indexOf(options.msDisplay)]}}</button></td>\n                <td><button class="opt" onclick="toggleOpt(\'hqTree\')">High-Quality Tree: {{ options.hqTree?"ON":"OFF" }}</button></td>\n            </tr>\n            <tr>\n                <td><button class="opt" onclick="toggleOpt(\'hideChallenges\')">Completed Challenges: {{ options.hideChallenges?"HIDDEN":"SHOWN" }}</button></td>\n                <td><button class="opt" onclick="toggleOpt(\'forceOneTab\'); needsCanvasUpdate = true">Single-Tab Mode: {{ options.forceOneTab?"ALWAYS":"AUTO" }}</button></td>\n\t\t\t\t<td><button class="opt" onclick="toggleOpt(\'forceTooltips\'); needsCanvasUpdate = true">Shift-Click to Toggle Tooltips: {{ options.forceTooltips?"ON":"OFF" }}</button></td>\n\t\t\t\t</tr> \n        </table>'},"back-button":{template:'\n        <button class="back" v-on:click="goBack()">‚Üê</button>\n        '},tooltip:{props:["text"],template:'<div class="tooltip" v-html="text"></div>\n\t\t'},"node-mark":{props:{layer:{},data:{},offset:{default:0},scale:{default:1}},template:'<div v-if=\'data\'>\n\t\t\t<div v-if=\'data === true\' class=\'star\' v-bind:style=\'{position: "absolute", left: (offset-10) + "px", top: (offset-10) + "px", transform: "scale( " + scale||1 + ", " + scale||1 + ")"}\'></div>\n\t\t\t<img v-else class=\'mark\' v-bind:style=\'{position: "absolute", left: (offset-22) + "px", top: (offset-15) + "px", transform: "scale( " + scale||1 + ", " + scale||1 + ")"}\' v-bind:src="data"></div>\n\t\t</div>\n\t\t'},particle:{props:["data","index"],template:'<div><div class=\'particle instant\' v-bind:style="[constructParticleStyle(data), data.style]" \n\t\t\tv-on:click="run(data.onClick, data)"  v-on:mouseenter="run(data.onMouseOver, data)" v-on:mouseleave="run(data.onMouseLeave, data)" ><span v-html="data.text"></span>\n\t\t</div>\n\t\t<svg version="2" v-if="data.color">\n\t\t<mask v-bind:id="\'pmask\' + data.id">\n        <image id="img" v-bind:href="data.image" x="0" y="0" :height="data.width" :width="data.height" />\n    \t</mask>\n    \t</svg>\n\t\t</div>\n\t\t'},bg:{props:["layer"],template:'<div class="bg" v-bind:style="[tmp[layer].style ?? {}, (tmp[layer].tabFormat && !Array.isArray(tmp[layer].tabFormat)) ? tmp[layer].tabFormat[player.subtabs[layer].mainTabs].style : {}]"></div>\n\t\t'}};
